{
	"info": {
		"_postman_id": "12345678-1234-1234-1234-123456789012",
		"name": "Smart Fit Girl API",
		"description": "Complete API testing collection for Smart Fit Girl application including authentication, user management, and survey endpoints.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Health Checks",
			"item": [
				{
					"name": "API Service Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_base_url}}/health",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Service Health",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}/health",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"health"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Login - Sophia",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.globals.set(\"jwt_token\", jsonData.token);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('id');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.globals.set(\"user_id\", jsonData.user.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"sophia.woytowitz@gmail.com\",\n    \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{api_base_url}}/auth/login",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login - Alex Johnson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('token');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"alex.johnson@example.com\",\n    \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{api_base_url}}/auth/login",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"sophia.woytowitz@gmail.com\",\n    \"password\": \"wrongpassword\"\n}"
						},
						"url": {
							"raw": "{{api_base_url}}/auth/login",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Protected Routes",
			"item": [
				{
					"name": "Get User Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"    pm.expect(jsonData).to.have.property('fullName');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_token}}"
							}
						],
						"url": {
							"raw": "{{api_base_url}}/api/users/profile",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Access Protected Without Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_base_url}}/api/users/profile",
							"host": [
								"{{api_base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Management (Direct)",
			"item": [
				{
					"name": "Get All Users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}/users",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('email');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}/users/{{user_id}}",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"{{user_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify User Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Credentials are valid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.valid).to.be.true;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"sophia.woytowitz@gmail.com\",\n    \"password\": \"password\"\n}"
						},
						"url": {
							"raw": "{{user_service_url}}/users/verify",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"verify"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Goals & Surveys",
			"item": [
				{
					"name": "Get All Goals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has goals grouped by category\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('goals');",
									"    pm.expect(jsonData.goals).to.have.property('weight');",
									"    pm.expect(jsonData.goals).to.have.property('appearance');",
									"    pm.expect(jsonData.goals).to.have.property('strength');",
									"    pm.expect(jsonData.goals).to.have.property('endurance');",
									"});",
									"",
									"pm.test(\"Goals have required properties\", function () {",
									"    var jsonData = pm.response.json();",
									"    var weightGoals = jsonData.goals.weight;",
									"    if (weightGoals && weightGoals.length > 0) {",
									"        pm.expect(weightGoals[0]).to.have.property('id');",
									"        pm.expect(weightGoals[0]).to.have.property('name');",
									"        pm.expect(weightGoals[0]).to.have.property('description');",
									"        pm.expect(weightGoals[0]).to.have.property('selected');",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}/goals",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"goals"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Survey for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has survey data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('userId');",
									"    pm.expect(jsonData).to.have.property('currentWeight');",
									"    pm.expect(jsonData).to.have.property('targetWeight');",
									"    pm.expect(jsonData).to.have.property('activityLevel');",
									"    pm.expect(jsonData).to.have.property('goals');",
									"    pm.globals.set('survey_id', jsonData.id);",
									"});",
									"",
									"pm.test(\"Goals are properly selected\", function () {",
									"    var jsonData = pm.response.json();",
									"    var weightGoals = jsonData.goals.weight;",
									"    var selectedCount = weightGoals.filter(g => g.selected).length;",
									"    pm.expect(selectedCount).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentWeight\": 165.5,\n    \"targetWeight\": 150.0,\n    \"activityLevel\": 4,\n    \"goalIds\": [1, 5, 7, 9]\n}"
						},
						"url": {
							"raw": "{{user_service_url}}/users/{{user_id}}/survey",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"survey"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Latest Survey",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has survey with goals\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('id');",
									"    pm.expect(jsonData).to.have.property('goals');",
									"    pm.expect(jsonData.goals).to.have.property('weight');",
									"    pm.expect(jsonData.goals).to.have.property('appearance');",
									"    pm.expect(jsonData.goals).to.have.property('strength');",
									"    pm.expect(jsonData.goals).to.have.property('endurance');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}/users/{{user_id}}/survey/latest",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"survey",
								"latest"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Second Survey (Progress Tracking)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Survey ID is different from first\", function () {",
									"    var jsonData = pm.response.json();",
									"    var firstSurveyId = pm.globals.get('survey_id');",
									"    pm.expect(jsonData.id).to.not.equal(parseInt(firstSurveyId));",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentWeight\": 160.0,\n    \"targetWeight\": 145.0,\n    \"activityLevel\": 6,\n    \"goalIds\": [1, 6, 7, 10]\n}"
						},
						"url": {
							"raw": "{{user_service_url}}/users/{{user_id}}/survey",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"survey"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error Handling",
			"item": [
				{
					"name": "Invalid User ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}/users/99999",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"99999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Survey Data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentWeight\": -10,\n    \"targetWeight\": 0,\n    \"activityLevel\": 15,\n    \"goalIds\": []\n}"
						},
						"url": {
							"raw": "{{user_service_url}}/users/{{user_id}}/survey",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"{{user_id}}",
								"survey"
							]
						}
					},
					"response": []
				},
				{
					"name": "No Surveys for User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{user_service_url}}/users/99999/survey/latest",
							"host": [
								"{{user_service_url}}"
							],
							"path": [
								"users",
								"99999",
								"survey",
								"latest"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "jwt_token",
			"value": ""
		},
		{
			"key": "user_id",
			"value": "1"
		},
		{
			"key": "survey_id",
			"value": ""
		}
	]
}
